// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MediaObject is an object representing the database table.
type MediaObject struct {
	MediaKey  string    `boil:"media_key" json:"media_key" toml:"media_key" yaml:"media_key"`
	URL       string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *mediaObjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mediaObjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MediaObjectColumns = struct {
	MediaKey  string
	URL       string
	Type      string
	CreatedAt string
	UpdatedAt string
}{
	MediaKey:  "media_key",
	URL:       "url",
	Type:      "type",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var MediaObjectTableColumns = struct {
	MediaKey  string
	URL       string
	Type      string
	CreatedAt string
	UpdatedAt string
}{
	MediaKey:  "media_objects.media_key",
	URL:       "media_objects.url",
	Type:      "media_objects.type",
	CreatedAt: "media_objects.created_at",
	UpdatedAt: "media_objects.updated_at",
}

// Generated where

var MediaObjectWhere = struct {
	MediaKey  whereHelperstring
	URL       whereHelperstring
	Type      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	MediaKey:  whereHelperstring{field: "`media_objects`.`media_key`"},
	URL:       whereHelperstring{field: "`media_objects`.`url`"},
	Type:      whereHelperstring{field: "`media_objects`.`type`"},
	CreatedAt: whereHelpertime_Time{field: "`media_objects`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`media_objects`.`updated_at`"},
}

// MediaObjectRels is where relationship names are stored.
var MediaObjectRels = struct {
}{}

// mediaObjectR is where relationships are stored.
type mediaObjectR struct {
}

// NewStruct creates a new relationship struct
func (*mediaObjectR) NewStruct() *mediaObjectR {
	return &mediaObjectR{}
}

// mediaObjectL is where Load methods for each relationship are stored.
type mediaObjectL struct{}

var (
	mediaObjectAllColumns            = []string{"media_key", "url", "type", "created_at", "updated_at"}
	mediaObjectColumnsWithoutDefault = []string{"media_key", "url", "type"}
	mediaObjectColumnsWithDefault    = []string{"created_at", "updated_at"}
	mediaObjectPrimaryKeyColumns     = []string{"media_key"}
	mediaObjectGeneratedColumns      = []string{}
)

type (
	// MediaObjectSlice is an alias for a slice of pointers to MediaObject.
	// This should almost always be used instead of []MediaObject.
	MediaObjectSlice []*MediaObject
	// MediaObjectHook is the signature for custom MediaObject hook methods
	MediaObjectHook func(context.Context, boil.ContextExecutor, *MediaObject) error

	mediaObjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mediaObjectType                 = reflect.TypeOf(&MediaObject{})
	mediaObjectMapping              = queries.MakeStructMapping(mediaObjectType)
	mediaObjectPrimaryKeyMapping, _ = queries.BindMapping(mediaObjectType, mediaObjectMapping, mediaObjectPrimaryKeyColumns)
	mediaObjectInsertCacheMut       sync.RWMutex
	mediaObjectInsertCache          = make(map[string]insertCache)
	mediaObjectUpdateCacheMut       sync.RWMutex
	mediaObjectUpdateCache          = make(map[string]updateCache)
	mediaObjectUpsertCacheMut       sync.RWMutex
	mediaObjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mediaObjectAfterSelectHooks []MediaObjectHook

var mediaObjectBeforeInsertHooks []MediaObjectHook
var mediaObjectAfterInsertHooks []MediaObjectHook

var mediaObjectBeforeUpdateHooks []MediaObjectHook
var mediaObjectAfterUpdateHooks []MediaObjectHook

var mediaObjectBeforeDeleteHooks []MediaObjectHook
var mediaObjectAfterDeleteHooks []MediaObjectHook

var mediaObjectBeforeUpsertHooks []MediaObjectHook
var mediaObjectAfterUpsertHooks []MediaObjectHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MediaObject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MediaObject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MediaObject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MediaObject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MediaObject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MediaObject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MediaObject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MediaObject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MediaObject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mediaObjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMediaObjectHook registers your hook function for all future operations.
func AddMediaObjectHook(hookPoint boil.HookPoint, mediaObjectHook MediaObjectHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mediaObjectAfterSelectHooks = append(mediaObjectAfterSelectHooks, mediaObjectHook)
	case boil.BeforeInsertHook:
		mediaObjectBeforeInsertHooks = append(mediaObjectBeforeInsertHooks, mediaObjectHook)
	case boil.AfterInsertHook:
		mediaObjectAfterInsertHooks = append(mediaObjectAfterInsertHooks, mediaObjectHook)
	case boil.BeforeUpdateHook:
		mediaObjectBeforeUpdateHooks = append(mediaObjectBeforeUpdateHooks, mediaObjectHook)
	case boil.AfterUpdateHook:
		mediaObjectAfterUpdateHooks = append(mediaObjectAfterUpdateHooks, mediaObjectHook)
	case boil.BeforeDeleteHook:
		mediaObjectBeforeDeleteHooks = append(mediaObjectBeforeDeleteHooks, mediaObjectHook)
	case boil.AfterDeleteHook:
		mediaObjectAfterDeleteHooks = append(mediaObjectAfterDeleteHooks, mediaObjectHook)
	case boil.BeforeUpsertHook:
		mediaObjectBeforeUpsertHooks = append(mediaObjectBeforeUpsertHooks, mediaObjectHook)
	case boil.AfterUpsertHook:
		mediaObjectAfterUpsertHooks = append(mediaObjectAfterUpsertHooks, mediaObjectHook)
	}
}

// OneG returns a single mediaObject record from the query using the global executor.
func (q mediaObjectQuery) OneG(ctx context.Context) (*MediaObject, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single mediaObject record from the query.
func (q mediaObjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MediaObject, error) {
	o := &MediaObject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for media_objects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MediaObject records from the query using the global executor.
func (q mediaObjectQuery) AllG(ctx context.Context) (MediaObjectSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MediaObject records from the query.
func (q mediaObjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (MediaObjectSlice, error) {
	var o []*MediaObject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MediaObject slice")
	}

	if len(mediaObjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MediaObject records in the query using the global executor
func (q mediaObjectQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MediaObject records in the query.
func (q mediaObjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count media_objects rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q mediaObjectQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q mediaObjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if media_objects exists")
	}

	return count > 0, nil
}

// MediaObjects retrieves all the records using an executor.
func MediaObjects(mods ...qm.QueryMod) mediaObjectQuery {
	mods = append(mods, qm.From("`media_objects`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`media_objects`.*"})
	}

	return mediaObjectQuery{q}
}

// FindMediaObjectG retrieves a single record by ID.
func FindMediaObjectG(ctx context.Context, mediaKey string, selectCols ...string) (*MediaObject, error) {
	return FindMediaObject(ctx, boil.GetContextDB(), mediaKey, selectCols...)
}

// FindMediaObject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMediaObject(ctx context.Context, exec boil.ContextExecutor, mediaKey string, selectCols ...string) (*MediaObject, error) {
	mediaObjectObj := &MediaObject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `media_objects` where `media_key`=?", sel,
	)

	q := queries.Raw(query, mediaKey)

	err := q.Bind(ctx, exec, mediaObjectObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from media_objects")
	}

	if err = mediaObjectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mediaObjectObj, err
	}

	return mediaObjectObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MediaObject) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MediaObject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_objects provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaObjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mediaObjectInsertCacheMut.RLock()
	cache, cached := mediaObjectInsertCache[key]
	mediaObjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mediaObjectAllColumns,
			mediaObjectColumnsWithDefault,
			mediaObjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mediaObjectType, mediaObjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mediaObjectType, mediaObjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `media_objects` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `media_objects` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `media_objects` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mediaObjectPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into media_objects")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MediaKey,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_objects")
	}

CacheNoHooks:
	if !cached {
		mediaObjectInsertCacheMut.Lock()
		mediaObjectInsertCache[key] = cache
		mediaObjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MediaObject record using the global executor.
// See Update for more documentation.
func (o *MediaObject) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MediaObject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MediaObject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mediaObjectUpdateCacheMut.RLock()
	cache, cached := mediaObjectUpdateCache[key]
	mediaObjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mediaObjectAllColumns,
			mediaObjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update media_objects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `media_objects` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mediaObjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mediaObjectType, mediaObjectMapping, append(wl, mediaObjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update media_objects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for media_objects")
	}

	if !cached {
		mediaObjectUpdateCacheMut.Lock()
		mediaObjectUpdateCache[key] = cache
		mediaObjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mediaObjectQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mediaObjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for media_objects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for media_objects")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MediaObjectSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MediaObjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaObjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `media_objects` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaObjectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mediaObject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mediaObject")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MediaObject) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLMediaObjectUniqueColumns = []string{
	"media_key",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MediaObject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no media_objects provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mediaObjectColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMediaObjectUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mediaObjectUpsertCacheMut.RLock()
	cache, cached := mediaObjectUpsertCache[key]
	mediaObjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mediaObjectAllColumns,
			mediaObjectColumnsWithDefault,
			mediaObjectColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mediaObjectAllColumns,
			mediaObjectPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert media_objects, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`media_objects`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `media_objects` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mediaObjectType, mediaObjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mediaObjectType, mediaObjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for media_objects")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mediaObjectType, mediaObjectMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for media_objects")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for media_objects")
	}

CacheNoHooks:
	if !cached {
		mediaObjectUpsertCacheMut.Lock()
		mediaObjectUpsertCache[key] = cache
		mediaObjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MediaObject record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MediaObject) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MediaObject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MediaObject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MediaObject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mediaObjectPrimaryKeyMapping)
	sql := "DELETE FROM `media_objects` WHERE `media_key`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from media_objects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for media_objects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q mediaObjectQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q mediaObjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mediaObjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from media_objects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_objects")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MediaObjectSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MediaObjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mediaObjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaObjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `media_objects` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaObjectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mediaObject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for media_objects")
	}

	if len(mediaObjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MediaObject) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MediaObject provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MediaObject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMediaObject(ctx, exec, o.MediaKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaObjectSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MediaObjectSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MediaObjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MediaObjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mediaObjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `media_objects`.* FROM `media_objects` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mediaObjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MediaObjectSlice")
	}

	*o = slice

	return nil
}

// MediaObjectExistsG checks if the MediaObject row exists.
func MediaObjectExistsG(ctx context.Context, mediaKey string) (bool, error) {
	return MediaObjectExists(ctx, boil.GetContextDB(), mediaKey)
}

// MediaObjectExists checks if the MediaObject row exists.
func MediaObjectExists(ctx context.Context, exec boil.ContextExecutor, mediaKey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `media_objects` where `media_key`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mediaKey)
	}
	row := exec.QueryRowContext(ctx, sql, mediaKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if media_objects exists")
	}

	return exists, nil
}

// Exists checks if the MediaObject row exists.
func (o *MediaObject) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MediaObjectExists(ctx, exec, o.MediaKey)
}
